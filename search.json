[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Setting up R",
    "section": "",
    "text": "Welcome\nWelcome to this guide that will help you to correctly install and configure a working environment for data science with , , and .\nTo install softwares, please visit the page corresponding to your operating system:\n\nWindows  \nmacOS  \nUbuntu  \n\n\n\n\n\n\n\nTip\n\n\n\nHaving an up-to-date environment is the first good practice. Do not forget to update your operating system!\n\n\nOnce you’ve installed all the required softwares, please make sure to configure:\n\nRStudio\ngit\nGitHub SSH keys\nGitHub Personal Access Token",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "chapters/windows.html",
    "href": "chapters/windows.html",
    "title": "Windows 10/11",
    "section": "",
    "text": "Prerequisites\nThe Windows Subsystem for Linux (WSL) enables you to access the power of both Windows and Linux at the same time on a Windows machine. WSL lets you install a Linux distribution (such as Ubuntu, OpenSUSE, Kali, Debian, Arch Linux, etc.) and use Linux applications, utilities, and Bash command-line tools directly on Windows, unmodified, without the overhead of a traditional virtual machine or dualboot setup.\nThis module is required only to install Docker Desktop. You can ignore this step if you don’t plan to install Docker.\nTo install WSL, open PowerShell or Windows Terminal in Administrator mode by right-clicking and selecting “Run as administrator”, and enter the following command:\nRestart your machine to complete the installation.\nThis command enables the features necessary to run WSL and install the Ubuntu distribution of Linux. After the reboot, a terminal will ask you to pick a username and a password for Ubuntu.\nFinally, just ensure that you use the version 2 of WSL. Close and reopen PowerShell or Windows Terminal in Administrator mode by right-clicking and selecting “Run as administrator”, and enter the following command:\nThat’s it! You have install Ubuntu as a Windows App.",
    "crumbs": [
      "Installation",
      "Windows 10/11"
    ]
  },
  {
    "objectID": "chapters/windows.html#prerequisites",
    "href": "chapters/windows.html#prerequisites",
    "title": "Windows 10/11",
    "section": "",
    "text": "Warning\n\n\n\nYou must use Windows 10/11 to run WSL.\n\n\n\n\n## Install Windows Subsystem for Linux ----\nwsl --install\n\n\n\n## Set WSL default version ----\nwsl --set-default-version 2\n\n\n\n\n\n\n\nUpdate your Linux system regularly\n\n\n\nKeep your Ubuntu distribution up-to-date by running:\n## Update Linux packages ----\nsudo apt update && sudo apt upgrade",
    "crumbs": [
      "Installation",
      "Windows 10/11"
    ]
  },
  {
    "objectID": "chapters/windows.html#installation",
    "href": "chapters/windows.html#installation",
    "title": "Windows 10/11",
    "section": "Installation",
    "text": "Installation\n\n\n\nSoftware\nDescription\nWebsite\n\n\n\n\nR\nThe R environment\nlink\n\n\nRtools\nA toolbox to build R packages from source\nlink\n\n\nRStudio Desktop\nIntegrated development environment (IDE) for R\nlink\n\n\nPandoc\nDocument converter used by rmarkdown\nlink\n\n\nQuarto CLI\nScientific publishing system built on Pandoc\nlink\n\n\nGit\nVersion control software\nlink\n\n\nDocker Desktop\nContainerization software\nlink\n\n\n\nWe are going to install the required software by using Chocolatey, a package manager for Windows. A package manager is a way to get software (and software updates) onto your machine without much work on your part. It’s the Windows equivalent of yum, pacman or apt-get.\nTo install Chocolatey, open PowerShell or Windows Terminal in Administrator mode by right-clicking and selecting “Run as administrator”, and enter the following command:\n## Install Chocolatey Package Manager ----\nSet-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))\nCheck your installation by running:\n## Get Chocolatey version ----\nchoco --version\n# Chocolatey v2.3.0\nIt’s time to install the required softwares:\n## Install R environment ----\nchoco install r r.studio rtools\n\n## Install git ----\nchoco install git\n\n## Install literate programing tools ----\nchoco install pandoc quarto\n\n## Install Docker ----\nchoco install docker-desktop\nIn addition, we need to install the  package quarto:\n\n## Install quarto package ----\ninstall.packages(\"quarto\")\n\nFinally, let’s install a LaTeX distribution to convert documents from .Rmd (or .qmd) to .pdf. We are going to install a lightened distribution w/ the  package tinytex.\n\n## Install tinytex package ----\ninstall.packages(\"tinytex\")\n\n## Install LaTeX distribution ----\ntinytex::install_tinytex()\n\n\n\n\n\n\n\nImportant\n\n\n\nIf you already have a LaTeX distribution, do not use tinytex.",
    "crumbs": [
      "Installation",
      "Windows 10/11"
    ]
  },
  {
    "objectID": "chapters/windows.html#check",
    "href": "chapters/windows.html#check",
    "title": "Windows 10/11",
    "section": "Check",
    "text": "Check\n   Restart your machine.\nOpen RStudio and run:\n\n## Get R version ----\nR.version.string\n# \"R version 4.4.2 (2024-10-31)\"\n\n## Check if git is installed ----\nSys.which(\"git\")\n#                               git\n# \"C:\\\\PROGRA~1\\\\Git\\\\cmd\\\\git.exe\"\n\n## Check if Rtools is installed ----\nSys.which(\"make\")\n#                               make \n# \"C:\\\\rtools44\\\\usr\\\\bin\\\\make.exe\"\n\n## Check if Pandoc is installed ----\nSys.which(\"pandoc\")\n#                                    pandoc \n# \"C:\\\\PROGRA~3\\\\CHOCOL~1\\\\bin\\\\pandoc.exe\"\n\n## Check if Quarto is installed ----\nSys.which(\"Quarto\")\n#                                    Quarto \n# \"C:\\\\PROGRA~3\\\\CHOCOL~1\\\\bin\\\\Quarto.exe\"\n\n## Check if LaTeX is installed ----\nSys.which(\"pdflatex\")\n#                                                                    pdflatex \n# \"C:\\\\Users\\\\janedoe\\\\AppData\\\\Roaming\\\\TinyTex\\\\bin\\\\windows\\\\pdflatex.exe\" \n\n## Check if Docker is installed ----\nSys.which(\"docker\")\n#                                                    docker \n# \"C:\\\\PROGRA~1\\\\Docker\\\\Docker\\\\RESOUR~1\\\\bin\\\\docker.exe\" \n\n## Install package from sources ----\ninstall.packages(\"jsonlite\", type = \"source\")\n\n\n\n\n\n\n\nUpdate your system regularly\n\n\n\nKeep your Windows Apps up-to-date by running:\n## Check for updates ----\nchoco outdated\n\n## Update Windows Apps ----\nchoco upgrade all",
    "crumbs": [
      "Installation",
      "Windows 10/11"
    ]
  },
  {
    "objectID": "chapters/windows.html#configuration",
    "href": "chapters/windows.html#configuration",
    "title": "Windows 10/11",
    "section": "Configuration",
    "text": "Configuration\nYou’ve just installed a working environment for data science w/ , , and .  Now follow instruction to configure your system.",
    "crumbs": [
      "Installation",
      "Windows 10/11"
    ]
  },
  {
    "objectID": "chapters/macos.html",
    "href": "chapters/macos.html",
    "title": "macOS",
    "section": "",
    "text": "Installation\nWe are going to install the required software by using Homebrew, a package manager for macOS. A package manager is a way to get software (and software updates) onto your machine without much work on your part. It’s the macOS equivalent of yum, pacman or apt-get.\nBefore installing Homebrew, we need to install the Apple software Xcode Command Line Tools. It is a self-contained package for software developers who wish to build Mac apps using UNIX-style commands.\nOpen a Terminal, run this line and accept the license:\nWe can now install Homebrew itself by running:\nIt’s time to install the required softwares:\nIn addition, we need to install the  package quarto:\n## Install quarto package ----\ninstall.packages(\"quarto\")\nFinally, let’s install a LaTeX distribution to convert documents from .Rmd (or .qmd) to .pdf. We are going to install a lightened distribution w/ the  package tinytex.\n## Install tinytex package ----\ninstall.packages(\"tinytex\")\n\n## Install LaTeX distribution ----\ntinytex::install_tinytex()",
    "crumbs": [
      "Installation",
      "macOS"
    ]
  },
  {
    "objectID": "chapters/macos.html#installation",
    "href": "chapters/macos.html#installation",
    "title": "macOS",
    "section": "",
    "text": "Software\nDescription\nWebsite\n\n\n\n\nR\nThe R environment\nlink\n\n\nXQuartz\nGraphical window system\nlink\n\n\nRStudio Desktop\nIntegrated development environment (IDE) for R\nlink\n\n\nPandoc\nDocument converter used by rmarkdown\nlink\n\n\nQuarto CLI\nScientific publishing system built on Pandoc\nlink\n\n\nGit\nVersion control software\nlink\n\n\nDocker Desktop\nContainerization software\nlink\n\n\n\n\n\n\n## Install Xcode Command Line Tools ----\nsudo xcode-select --install\n\n## Install Homebrew ----\n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n\n## Check installation ----\nbrew --version\n# Homebrew 4.3.23\n\n## Update repositories (list of available software) ----\nbrew update\n\n## Install utilities for R ----\nbrew install --cask xquartz     ## Graphical window system\nbrew install gfortran           ## FORTRAN compiler for GCC\n\n## Install R ----\nbrew install --cask r\n\n## Install RStudio Desktop ----\nbrew install --cask rstudio\n\n## Install git ----\nbrew install git\n\n## Install pandoc ----\nbrew install pandoc\n\n## Install Quarto ----\nbrew install --cask quarto\n\n## Install Docker ----\nbrew install docker\n\n\n\n\n\n\n\n\n\n\nImportant\n\n\n\nIf you already have a LaTeX distribution, do not use tinytex.",
    "crumbs": [
      "Installation",
      "macOS"
    ]
  },
  {
    "objectID": "chapters/macos.html#check",
    "href": "chapters/macos.html#check",
    "title": "macOS",
    "section": "Check",
    "text": "Check\n   Restart your machine.\nOpen RStudio and run:\n\n## Get R version ----\nR.version.string\n# \"R version 4.4.2 (2024-10-31)\"\n\n## Check if git is installed ----\nSys.which(\"git\")\n#            git\n# \"/usr/bin/git\"\n\n## Check if make is installed ----\nSys.which(\"make\")\n#            make \n# \"/usr/bin/make\"\n\n## Check if Pandoc is installed ----\nSys.which(\"pandoc\")\n#                  pandoc \n# \"/usr/local/bin/pandoc\"\n\n## Check if Quarto is installed ----\nSys.which(\"Quarto\")\n#                  Quarto \n# \"/usr/local/bin/Quarto\"\n\n## Check if LaTeX is installed ----\nSys.which(\"pdflatex\")\n#                  pdflatex \n# \"/usr/local/bin/pdflatex\" \n\n## Check if Docker is installed ----\nSys.which(\"docker\")\n#                  docker \n# \"/usr/local/bin/docker\" \n\n## Install package from sources ----\ninstall.packages(\"jsonlite\", type = \"source\")\n\n\n\n\n\n\n\nUpdate your system regularly\n\n\n\nKeep your macOS Apps up-to-date by running:\n## Check for updates ----\nbrew update\n\n## Update macOS Apps ----\nbrew upgrade --greedy",
    "crumbs": [
      "Installation",
      "macOS"
    ]
  },
  {
    "objectID": "chapters/macos.html#configuration",
    "href": "chapters/macos.html#configuration",
    "title": "macOS",
    "section": "Configuration",
    "text": "Configuration\nYou’ve just installed a working environment for data science w/ , , and .  Now follow instruction to configure your system.",
    "crumbs": [
      "Installation",
      "macOS"
    ]
  },
  {
    "objectID": "chapters/ubuntu.html",
    "href": "chapters/ubuntu.html",
    "title": "Ubuntu/Debian",
    "section": "",
    "text": "Installation\nWe are going to install the required software by using APT, a package manager for Debian derived Linux distributions. A package manager is a way to get software (and software updates) onto your machine without much work on your part.\nFirst check your version of Ubuntu in a terminal:\nLet’s install  by following these steps (change the URL below by the one specific to your version of Ubuntu, cf. Table 1) :\nTo install RStudio Desktop, follow these steps (uncomment the appropriate line matching your Ubuntu version):\nNow let’s install git:\nAnd Pandoc (to convert documents with rmarkdown):\nLet’s install the Quarto software, a multi-language, next-generation version of R Markdown developed by Posit (formerly RStudio Inc.), that includes dozens of new features and capabilities.\nFinally, let’s install Docker Desktop:\nIn addition, we need to install the  package quarto:\n## Install quarto package ----\ninstall.packages(\"quarto\")\nFinally, let’s install a LaTeX distribution to convert documents from .Rmd (or .qmd) to .pdf. We are going to install a lightened distribution w/ the  package tinytex.\n## Install tinytex package ----\ninstall.packages(\"tinytex\")\n\n## Install LaTeX distribution ----\ntinytex::install_tinytex()",
    "crumbs": [
      "Installation",
      "Ubuntu/Debian"
    ]
  },
  {
    "objectID": "chapters/ubuntu.html#installation",
    "href": "chapters/ubuntu.html#installation",
    "title": "Ubuntu/Debian",
    "section": "",
    "text": "Software\nDescription\nWebsite\n\n\n\n\nR\nThe R environment\nlink\n\n\nRStudio Desktop\nIntegrated development environment (IDE) for R\nlink\n\n\nPandoc\nDocument converter used by rmarkdown\nlink\n\n\nQuarto CLI\nScientific publishing system built on Pandoc\nlink\n\n\nGit\nVersion control software\nlink\n\n\nDocker\nContainerization software\nlink\n\n\n\n\n\n## Check Ubuntu version ----\ncat /etc/issue\n# Ubuntu 22.04 LTS\n\nTable 1. List of CRAN repositories for different versions of Ubuntu\n\n\n\n\n\n\n\nRelease\nRelease name\nRepository URL\n\n\n\n\n24.04 LTS\nNoble Numbat\nhttps://cloud.r-project.org/bin/linux/ubuntu noble-cran40/\n\n\n22.04 LTS\nJammy Jellyfish\nhttps://cloud.r-project.org/bin/linux/ubuntu jammy-cran40/\n\n\n20.04 LTS\nFocal Fossa\nhttps://cloud.r-project.org/bin/linux/ubuntu focal-cran40/\n\n\n18.04 LTS\nBionic Beaver\nhttps://cloud.r-project.org/bin/linux/ubuntu bionic-cran40/\n\n\n\n\n## Install APT utilities ----\nsudo apt install build-essential software-properties-common wget\n\n## Add CRAN GPG key ----\nwget -qO- https://cloud.r-project.org/bin/linux/ubuntu/marutter_pubkey.asc | sudo tee -a /etc/apt/trusted.gpg.d/cran_ubuntu_key.asc\n\n## Add CRAN repository to APT repositories list ----\nsudo add-apt-repository 'deb https://cloud.r-project.org/bin/linux/ubuntu noble-cran40/'\n\n## Update packages list ----\nsudo apt update\n\n## Install R ----\nsudo apt install r-base r-base-dev\n\n## Download RStudio Desktop installer (Ubuntu &gt;= 22.04) ----\n# wget https://download1.rstudio.org/electron/jammy/amd64/rstudio-2024.09.1-394-amd64.deb\n\n## Download RStudio Desktop installer (Ubuntu = 20.04) ----\n# wget https://download1.rstudio.org/electron/focal/amd64/rstudio-2024.09.1-394-amd64.deb\n\n## Install RStudio Desktop ----\nsudo dpkg -i rstudio-2024.09.1-394-amd64.deb\n\n## Remove installer ----\nrm rstudio-2024.09.1-394-amd64.deb\n\n## Install git -----\nsudo apt install git\n\n## Install pandoc -----\nsudo apt install pandoc\n\n## Download Quarto installer ----\nwget https://github.com/quarto-dev/quarto-cli/releases/download/v1.6.36/quarto-1.6.36-linux-amd64.deb\n\n## Install Quarto ----\nsudo dpkg -i quarto-1.6.36-linux-amd64.deb\n\n## Remove installer ----\nrm quarto-1.6.36-linux-amd64.deb\n\n## Add Docker's official GPG key ----\nsudo apt install ca-certificates curl gnupg\nsudo install -m 0755 -d /etc/apt/keyrings\ncurl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg\nsudo chmod a+r /etc/apt/keyrings/docker.gpg\n\n## Add the repository to Apt sources ----\necho \\\n  \"deb [arch=\"$(dpkg --print-architecture)\" signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \\\n  \"$(. /etc/os-release && echo \"$VERSION_CODENAME\")\" stable\" | \\\n  sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null\n  \nsudo apt update\n\n## Install Docker ----\nsudo apt install docker-ce\n\n## Allow user to use Docker without sudo ----\nsudo usermod -aG docker ${USER}\n\n\n\n\n\n\n\n\n\n\nImportant\n\n\n\nIf you already have a LaTeX distribution, do not use tinytex.",
    "crumbs": [
      "Installation",
      "Ubuntu/Debian"
    ]
  },
  {
    "objectID": "chapters/ubuntu.html#check",
    "href": "chapters/ubuntu.html#check",
    "title": "Ubuntu/Debian",
    "section": "Check",
    "text": "Check\n   Restart your machine.\nOpen RStudio and run:\n\n## Get R version ----\nR.version.string\n# \"R version 4.4.2 (2024-10-31)\"\n\n## Check if git is installed ----\nSys.which(\"git\")\n#            git\n# \"/usr/bin/git\"\n\n## Check if make is installed ----\nSys.which(\"make\")\n#            make \n# \"/usr/bin/make\"\n\n## Check if Pandoc is installed ----\nSys.which(\"pandoc\")\n#            pandoc \n# \"/usr/bin/pandoc\"\n\n## Check if Quarto is installed ----\nSys.which(\"Quarto\")\n#            Quarto \n# \"/usr/bin/Quarto\"\n\n## Check if LaTeX is installed ----\nSys.which(\"pdflatex\")\n#            pdflatex \n# \"/usr/bin/pdflatex\" \n\n## Check if Docker is installed ----\nSys.which(\"docker\")\n#            docker \n# \"/usr/bin/docker\" \n\n## Install package from sources ----\ninstall.packages(\"jsonlite\", type = \"source\")\n\n\n\n\n\n\n\nUpdate your system regularly\n\n\n\nKeep your Linux packages up-to-date by running:\n## Check for updates ----\nsudo apt update\n\n## Update Linux Apps ----\nsudo apt upgrade",
    "crumbs": [
      "Installation",
      "Ubuntu/Debian"
    ]
  },
  {
    "objectID": "chapters/ubuntu.html#configuration",
    "href": "chapters/ubuntu.html#configuration",
    "title": "Ubuntu/Debian",
    "section": "Configuration",
    "text": "Configuration\nYou’ve just installed a working environment for data science w/ , , and .  Now follow instruction to configure your system.",
    "crumbs": [
      "Installation",
      "Ubuntu/Debian"
    ]
  },
  {
    "objectID": "chapters/rstudio.html",
    "href": "chapters/rstudio.html",
    "title": "RStudio",
    "section": "",
    "text": "This page presents the minimal configuration of RStudio Desktop for a better reproducibility.\nGo to Tools &gt; Global Options &gt; General and:\n\nuncheck Restore .RData into workspace at startup\nselect Never save workspace to .RData on exit\nuncheck Always save history (even when not saving .RData)\n\n\n\n\nFigure 1: Configuration of RStudio IDE\n\n\n\n\n\n\n\n\nTips for better reproducibility\n\n\n\n\nNever save your workspace as .RData: decide what you want to save and use save(), saveRDS(), write.csv(), etc.\nNever save your command history: write your code in  scripts, not in the console\n\n\n\nNow follow instruction to configure git.",
    "crumbs": [
      "Configuration",
      "RStudio"
    ]
  },
  {
    "objectID": "chapters/git.html",
    "href": "chapters/git.html",
    "title": "git",
    "section": "",
    "text": "To use git to version your projects, you need to locally store your credentials (username and email) that will be added to all your commits.\nOpen a terminal (you can use the terminal of RStudio Desktop) and run:\n## Tell git your user name ----\ngit config --global user.name  \"Jane Doe\"\n\n## Tell git your email address ----\ngit config --global user.email \"jane.doe@mail.com\"\nWhen you create a new git project, the default branch will be named master. It’s recommended to replace master by main (for more information read this article).\nOn a terminal, run:\n## Rename default git branch ----\ngit config --global init.defaultBranch main\nFrom now when you will initialize git in a new project, the default branch will be main.\nCheck your git configuration:\n## Print the content of git config file ----\ncat ~/.gitconfig\n# [user]\n#         name  = Jane Doe\n#         email = jane.doe@mail.com\n# [init]\n#         defaultBranch = main\nNow follow instruction to configure GitHub SSH.",
    "crumbs": [
      "Configuration",
      "git"
    ]
  },
  {
    "objectID": "chapters/github-ssh.html",
    "href": "chapters/github-ssh.html",
    "title": "GitHub SSH keys",
    "section": "",
    "text": "To communicate with GitHub, you can use the protocol HTTPS (default) or the protocol SSH (recommended). The protocol SSH is a more secure method of logging into a remote server (GitHub). To use this protocol, you need to generate an SSH keys pair that consists in creating two long strings of characters: a public key and a private key. You can place the public key on any server (for instance GitHub), and then connect to the server using a device (your laptop) that has access to the private key.\nTo generate a new SSH keys pair proceed as follow:\n\nCreate an account on GitHub at https://github.com/signup\nOpen RStudio and click on: Tools &gt; Global options &gt; Git/SVN\nClick on Create SSH Key, select ED25519 and then click on Create (you can omit the passphrase). This new SSH keys pair has been stored in ~/.ssh/.\nClick on View public key and copy it\nGo to the page https://github.com/settings/keys and click on New SSH key\nChoose a name for your key (e.g. your laptop name) and paste your public key.\nFinally click on Add SSH key\n\n\n\n\n\n\n\nFor Ubuntu users\n\n\n\nIf you are on Ubuntu you might need to install ssh-askpass:\nsudo apt install ssh-askpass\n\n\nLet’s test the SSH connection with GitHub. Open a terminal and run:\nssh -T git@github.com\nWhen you first connect to GitHub (and to any remote server), you will be asked if you trust this server:\nThe authenticity of host '[92.168.45.3]:22' can't be established.\nED25519 key fingerprint is ...\nAre you sure you want to continue connecting (yes/no/[fingerprint])?\nJust write yes and press Enter. This will add a line in the file ~/.ssh/known_hosts that lists all your trusted servers.\nCongrats! You can now communicate with GitHub using the SSH protocol.\n\n\n\n\n\n\nImportant note\n\n\n\nFrom now, you need to use the SSH URL when connecting to a GitHub repo.\n# SSH URL (use this one) ----\ngit@github.com:github_account/github_repo.git\n\n# HTTPS URL ----\nhttps://github.com/github_account/github_repo.git\n\n\nN.B. If you lose your private SSH key you won’t be able to establish a connection with GitHub. You’ll need to delete your SSH key on GitHub and to create a new one.",
    "crumbs": [
      "Configuration",
      "GitHub SSH keys"
    ]
  },
  {
    "objectID": "chapters/github-token.html",
    "href": "chapters/github-token.html",
    "title": "GitHub Personal Access Token",
    "section": "",
    "text": "If you want to use the GitHub API, essentially with the  packages usethis and rcompendium, you need to create a GitHub Personal Access Token (PAT).\nProceed as follow:\n\nGo to https://github.com/settings/tokens\nClick on Generate new token (classic)\nChoose a name for your new token (e.g. your laptop name)\nSelect no expiration date\nIn the section Select scopes, select at least repo and workflow\nCopy this token\n\nThen open RStudio Desktop and run:\n\n## Install usethis package ----\ninstall.packages(\"usethis\")\n\n## Open ~/.Renviron file ----\nusethis::edit_r_environ()\n# • Modify '~/.Renviron'\n# • Restart R for changes to take effect\n\nThe last command will open the ~/.Renviron file. Add this new line: GITHUB_PAT='ghp_XXX' where ghp_XXX is your token. Do not forget to restart RStudio Desktop.\nFinally let’s tell usethis to use the SSH protocol to communicate with GitHub. Open RStudio and run:\n\n## Open ~/.Rprofile file ----\nusethis::edit_r_profile()\n# • Modify '~/.Rprofile'\n# • Restart R for changes to take effect\n\nIn the ~/.Rprofile file, add this new line: options(usethis.protocol = \"ssh\"). Do not forget to restart RStudio Desktop.\n\n\n\n\n\n\nTo go further\n\n\n\n\nThe .Renviron file is a good place to store secrets (API tokens, password, etc.). This file is read by  at startup. To access these variables, you can use the function Sys.getenv(\"GITHUB_PAT\").\nThe .Rprofile file allows you to run  command lines at startup. You can customize the default behaviour of  and define some variables with options(). To access these variables, you can use options()$\"usethis.protocol\".\n\nMore information here.",
    "crumbs": [
      "Configuration",
      "GitHub Personal Access Token"
    ]
  }
]