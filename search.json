[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Setting up R",
    "section": "",
    "text": "Welcome\nWelcome to this guide that will help you to correctly install and configure a working environment for data science with , , and .\nTo install softwares, please visit the page corresponding to your operating system:\n\nWindows  \nmacOS  \nUbuntu  \n\n\n\n\n\n\n\nTip\n\n\n\nHaving an up-to-date environment is the first good practice. Do not forget to update your operating system!\n\n\nOnce you’ve installed all the required softwares, please make sure to configure:\n\nRStudio\ngit\nGitHub SSH keys\nGitHub Personal Access Token"
  },
  {
    "objectID": "chapters/windows.html#prerequisites",
    "href": "chapters/windows.html#prerequisites",
    "title": "Windows 10/11",
    "section": "Prerequisites",
    "text": "Prerequisites\nThe Windows Subsystem for Linux (WSL) enables you to access the power of both Windows and Linux at the same time on a Windows machine. WSL lets you install a Linux distribution (such as Ubuntu, OpenSUSE, Kali, Debian, Arch Linux, etc.) and use Linux applications, utilities, and Bash command-line tools directly on Windows, unmodified, without the overhead of a traditional virtual machine or dualboot setup.\n\n\n\n\n\n\nWarning\n\n\n\nYou must use Windows 10/11 to run WSL.\n\n\nThis module is required to install Docker Desktop.\nTo install WSL, open PowerShell or Windows Terminal in Administrator mode by right-clicking and selecting “Run as administrator”, and enter the following command:\n## Install Windows Subsystem for Linux ----\nwsl --install\nRestart your machine to complete the installation.\nThis command enables the features necessary to run WSL and install the Ubuntu distribution of Linux. After the reboot, a terminal will ask you to pick a username and a password for Ubuntu.\nFinally, just ensure that you use the version 2 of WSL. Close and reopen PowerShell or Windows Terminal in Administrator mode by right-clicking and selecting “Run as administrator”, and enter the following command:\n## Set WSL default version ----\nwsl --set-default-version 2\nThat’s it! You have install Ubuntu as a Windows App.\n\n\n\n\n\n\nUpdate your Linux system regularly\n\n\n\nKeep your Ubuntu distribution up-to-date by running:\n## Update Linux packages ----\nsudo apt update && sudo apt upgrade"
  },
  {
    "objectID": "chapters/windows.html#installation",
    "href": "chapters/windows.html#installation",
    "title": "Windows 10/11",
    "section": "Installation",
    "text": "Installation\n\n\n\nSoftware\nDescription\nWebsite\n\n\n\n\nR\nThe R environment\nlink\n\n\nRtools\nA toolbox to build R packages from source\nlink\n\n\nRStudio Desktop\nIntegrated development environment (IDE) for R\nlink\n\n\nPandoc\nDocument converter used by rmarkdown\nlink\n\n\nQuarto CLI\nScientific publishing system built on Pandoc\nlink\n\n\nGit\nVersion control software\nlink\n\n\nDocker Desktop\nContainerization software\nlink\n\n\n\nWe are going to install the required software by using Chocolatey, a package manager for Windows. A package manager is a way to get software (and software updates) onto your machine without much work on your part. It’s the Windows equivalent of yum, pacman or apt-get.\nTo install Chocolatey, open PowerShell or Windows Terminal in Administrator mode by right-clicking and selecting “Run as administrator”, and enter the following command:\n## Install Chocolatey Package Manager ----\nSet-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))\nCheck your installation by running:\n## Get Chocolatey version ----\nchoco --version\n# Chocolatey v2.2.2\nIt’s time to install the required softwares:\n## Install R environment ----\nchoco install r r.studio rtools\n\n## Install git ----\nchoco install git\n\n## Install literate programing tools ----\nchoco install pandoc quarto\n\n## Install Docker ----\nchoco install docker-desktop\nIn addition, we need to install the  package quarto:\n\n## Install quarto package ----\ninstall.packages(\"quarto\")\n\nFinally, let’s install a LaTeX distribution to convert documents from .Rmd (or .qmd) to .pdf. We are going to install a lightened distribution w/ the  package tinytex.\n\n## Install tinytex package ----\ninstall.packages(\"tinytex\")\n\n## Install LaTeX distribution ----\ntinytex::install_tinytex()\n\n\n\n\n\n\n\nImportant\n\n\n\nIf you already have a LaTeX distribution, do not use tinytex."
  },
  {
    "objectID": "chapters/windows.html#check",
    "href": "chapters/windows.html#check",
    "title": "Windows 10/11",
    "section": "Check",
    "text": "Check\n   Restart your machine.\nOpen RStudio and run:\n\n## Get R version ----\nR.version.string\n# \"R version 4.3.2 (2023-10-31)\"\n\n## Check if git is installed ----\nSys.which(\"git\")\n#                               git\n# \"C:\\\\PROGRA~1\\\\Git\\\\cmd\\\\git.exe\"\n\n## Check if Rtools is installed ----\nSys.which(\"make\")\n#                               make \n# \"C:\\\\rtools43\\\\usr\\\\bin\\\\make.exe\"\n\n## Check if Pandoc is installed ----\nSys.which(\"pandoc\")\n#                                    pandoc \n# \"C:\\\\PROGRA~3\\\\CHOCOL~1\\\\bin\\\\pandoc.exe\"\n\n## Check if Quarto is installed ----\nSys.which(\"Quarto\")\n#                                    Quarto \n# \"C:\\\\PROGRA~3\\\\CHOCOL~1\\\\bin\\\\Quarto.exe\"\n\n## Check if LaTeX is installed ----\nSys.which(\"pdflatex\")\n#                                                                    pdflatex \n# \"C:\\\\Users\\\\janedoe\\\\AppData\\\\Roaming\\\\TinyTex\\\\bin\\\\windows\\\\pdflatex.exe\" \n\n## Check if Docker is installed ----\nSys.which(\"docker\")\n#                                                    docker \n# \"C:\\\\PROGRA~1\\\\Docker\\\\Docker\\\\RESOUR~1\\\\bin\\\\docker.exe\" \n\n## Install package from sources ----\ninstall.packages(\"jsonlite\", type = \"source\")\n\n\n\n\n\n\n\nUpdate your system regularly\n\n\n\nKeep your Windows Apps up-to-date by running:\n## Check for updates ----\nchoco outdated\n\n## Update Windows Apps ----\nchoco upgrade all"
  },
  {
    "objectID": "chapters/windows.html#configuration",
    "href": "chapters/windows.html#configuration",
    "title": "Windows 10/11",
    "section": "Configuration",
    "text": "Configuration\nYou’ve just installed a working environment for data science w/ , , and .  Now follow instruction to configure your system."
  },
  {
    "objectID": "chapters/macos.html#installation",
    "href": "chapters/macos.html#installation",
    "title": "macOS",
    "section": "Installation",
    "text": "Installation\n\n\n\nSoftware\nDescription\nWebsite\n\n\n\n\nR\nThe R environment\nlink\n\n\nXQuartz\nGraphical window system\nlink\n\n\nRStudio Desktop\nIntegrated development environment (IDE) for R\nlink\n\n\nPandoc\nDocument converter used by rmarkdown\nlink\n\n\nQuarto CLI\nScientific publishing system built on Pandoc\nlink\n\n\nGit\nVersion control software\nlink\n\n\nDocker Desktop\nContainerization software\nlink\n\n\n\nWe are going to install the required software by using Homebrew, a package manager for macOS. A package manager is a way to get software (and software updates) onto your machine without much work on your part. It’s the macOS equivalent of yum, pacman or apt-get.\nBefore installing Homebrew, we need to install the Apple software Xcode Command Line Tools. It is a self-contained package for software developers who wish to build Mac apps using UNIX-style commands.\nOpen a Terminal, run this line and accept the license:\n## Install Xcode Command Line Tools ----\nsudo xcode-select --install\nWe can now install Homebrew itself by running:\n## Install Homebrew ----\n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n\n## Check installation ----\nbrew --version\n# Homebrew 4.1.19\n\n## Update repositories (list of available software) ----\nbrew update\nIt’s time to install the required softwares:\n## Install utilities for R ----\nbrew install --cask xquartz     ## Graphical window system\nbrew install gfortran           ## FORTRAN compiler for GCC\n\n## Install R ----\nbrew install --cask r\n\n## Install RStudio Desktop ----\nbrew install --cask rstudio\n\n## Install git ----\nbrew install git\n\n## Install pandoc ----\nbrew install pandoc\n\n## Install Quarto ----\nbrew install --cask quarto\n\n## Install Docker ----\nbrew install docker\nIn addition, we need to install the  package quarto:\n\n## Install quarto package ----\ninstall.packages(\"quarto\")\n\nFinally, let’s install a LaTeX distribution to convert documents from .Rmd (or .qmd) to .pdf. We are going to install a lightened distribution w/ the  package tinytex.\n\n## Install tinytex package ----\ninstall.packages(\"tinytex\")\n\n## Install LaTeX distribution ----\ntinytex::install_tinytex()\n\n\n\n\n\n\n\nImportant\n\n\n\nIf you already have a LaTeX distribution, do not use tinytex."
  },
  {
    "objectID": "chapters/macos.html#check",
    "href": "chapters/macos.html#check",
    "title": "macOS",
    "section": "Check",
    "text": "Check\n   Restart your machine.\nOpen RStudio and run:\n\n## Get R version ----\nR.version.string\n# \"R version 4.3.2 (2023-10-31)\"\n\n## Check if git is installed ----\nSys.which(\"git\")\n#            git\n# \"/usr/bin/git\"\n\n## Check if make is installed ----\nSys.which(\"make\")\n#            make \n# \"/usr/bin/make\"\n\n## Check if Pandoc is installed ----\nSys.which(\"pandoc\")\n#                  pandoc \n# \"/usr/local/bin/pandoc\"\n\n## Check if Quarto is installed ----\nSys.which(\"Quarto\")\n#                  Quarto \n# \"/usr/local/bin/Quarto\"\n\n## Check if LaTeX is installed ----\nSys.which(\"pdflatex\")\n#                  pdflatex \n# \"/usr/local/bin/pdflatex\" \n\n## Check if Docker is installed ----\nSys.which(\"docker\")\n#                  docker \n# \"/usr/local/bin/docker\" \n\n## Install package from sources ----\ninstall.packages(\"jsonlite\", type = \"source\")\n\n\n\n\n\n\n\nUpdate your system regularly\n\n\n\nKeep your macOS Apps up-to-date by running:\n## Check for updates ----\nbrew update\n\n## Update macOS Apps ----\nbrew upgrade --greedy"
  },
  {
    "objectID": "chapters/macos.html#configuration",
    "href": "chapters/macos.html#configuration",
    "title": "macOS",
    "section": "Configuration",
    "text": "Configuration\nYou’ve just installed a working environment for data science w/ , , and .  Now follow instruction to configure your system."
  },
  {
    "objectID": "chapters/ubuntu.html#installation",
    "href": "chapters/ubuntu.html#installation",
    "title": "Ubuntu/Debian",
    "section": "Installation",
    "text": "Installation\n\n\n\nSoftware\nDescription\nWebsite\n\n\n\n\nR\nThe R environment\nlink\n\n\nRStudio Desktop\nIntegrated development environment (IDE) for R\nlink\n\n\nPandoc\nDocument converter used by rmarkdown\nlink\n\n\nQuarto CLI\nScientific publishing system built on Pandoc\nlink\n\n\nGit\nVersion control software\nlink\n\n\nDocker\nContainerization software\nlink\n\n\n\nWe are going to install the required software by using APT, a package manager for Debian derived Linux distributions. A package manager is a way to get software (and software updates) onto your machine without much work on your part.\nFirst check your version of Ubuntu in a terminal:\n## Check Ubuntu version ----\ncat /etc/issue\n# Ubuntu 22.04 LTS\n\nTable 1. List of CRAN repositories for different versions of Ubuntu\n\n\n\n\n\n\n\nRelease\nRelease name\nRepository URL\n\n\n\n\n22.04 LTS\nJammy Jellyfish\nhttps://cloud.r-project.org/bin/linux/ubuntu jammy-cran40/\n\n\n20.04 LTS\nFocal Fossa\nhttps://cloud.r-project.org/bin/linux/ubuntu focal-cran40/\n\n\n18.04 LTS\nBionic Beaver\nhttps://cloud.r-project.org/bin/linux/ubuntu bionic-cran40/\n\n\n\nLet’s install  by following these steps (change the URL below by the one specific to your version of Ubuntu, cf. Table 1) :\n## Install APT utilities ----\nsudo apt install build-essential software-properties-common wget\n\n## Add CRAN GPG key ----\nwget -qO- https://cloud.r-project.org/bin/linux/ubuntu/marutter_pubkey.asc | sudo tee -a /etc/apt/trusted.gpg.d/cran_ubuntu_key.asc\n\n## Add CRAN repository to APT repositories list ----\nsudo add-apt-repository 'deb https://cloud.r-project.org/bin/linux/ubuntu jammy-cran40/'\n\n## Update packages list ----\nsudo apt update\n\n## Install R ----\nsudo apt install r-base r-base-dev\nTo install RStudio Desktop, follow these steps (uncomment the appropriate line matching your Ubuntu version):\n## Download RStudio Desktop installer (Ubuntu = 22.04) ----\n# wget https://download1.rstudio.org/electron/jammy/amd64/rstudio-2023.09.1-494-amd64.deb\n\n## Download RStudio Desktop installer (Ubuntu = 20.04) ----\n# wget https://download1.rstudio.org/electron/focal/amd64/rstudio-2023.09.1-494-amd64.deb\n\n## Install RStudio Desktop ----\nsudo dpkg -i rstudio-2023.09.1-494-amd64.deb\n\n## Remove installer ----\nrm rstudio-2023.09.1-494-amd64.deb\nNow let’s install git:\n## Install git -----\nsudo apt install git\nAnd Pandoc (to convert documents with rmarkdown):\n## Install pandoc -----\nsudo apt install pandoc\nLet’s install the Quarto software, a multi-language, next-generation version of R Markdown developed by Posit (formerly RStudio Inc.), that includes dozens of new features and capabilities.\n## Download Quarto installer ----\nwget https://github.com/quarto-dev/quarto-cli/releases/download/v1.3.450/quarto-1.3.450-linux-amd64.deb\n\n## Install Quarto ----\nsudo dpkg -i quarto-1.3.450-linux-amd64.deb\n\n## Remove installer ----\nrm quarto-1.3.450-linux-amd64.deb\nFinally, let’s install Docker Desktop:\n## Add Docker's official GPG key ----\nsudo apt install ca-certificates curl gnupg\nsudo install -m 0755 -d /etc/apt/keyrings\ncurl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg\nsudo chmod a+r /etc/apt/keyrings/docker.gpg\n\n## Add the repository to Apt sources ----\necho \\\n  \"deb [arch=\"$(dpkg --print-architecture)\" signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \\\n  \"$(. /etc/os-release && echo \"$VERSION_CODENAME\")\" stable\" | \\\n  sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null\n  \nsudo apt update\n\n## Install Docker ----\nsudo apt install docker-ce\n\n## Allow user to use Docker without sudo ----\nsudo usermod -aG docker ${USER}\nIn addition, we need to install the  package quarto:\n\n## Install quarto package ----\ninstall.packages(\"quarto\")\n\nFinally, let’s install a LaTeX distribution to convert documents from .Rmd (or .qmd) to .pdf. We are going to install a lightened distribution w/ the  package tinytex.\n\n## Install tinytex package ----\ninstall.packages(\"tinytex\")\n\n## Install LaTeX distribution ----\ntinytex::install_tinytex()\n\n\n\n\n\n\n\nImportant\n\n\n\nIf you already have a LaTeX distribution, do not use tinytex."
  },
  {
    "objectID": "chapters/ubuntu.html#check",
    "href": "chapters/ubuntu.html#check",
    "title": "Ubuntu/Debian",
    "section": "Check",
    "text": "Check\n   Restart your machine.\nOpen RStudio and run:\n\n## Get R version ----\nR.version.string\n# \"R version 4.3.2 (2023-10-31)\"\n\n## Check if git is installed ----\nSys.which(\"git\")\n#            git\n# \"/usr/bin/git\"\n\n## Check if make is installed ----\nSys.which(\"make\")\n#            make \n# \"/usr/bin/make\"\n\n## Check if Pandoc is installed ----\nSys.which(\"pandoc\")\n#            pandoc \n# \"/usr/bin/pandoc\"\n\n## Check if Quarto is installed ----\nSys.which(\"Quarto\")\n#            Quarto \n# \"/usr/bin/Quarto\"\n\n## Check if LaTeX is installed ----\nSys.which(\"pdflatex\")\n#            pdflatex \n# \"/usr/bin/pdflatex\" \n\n## Check if Docker is installed ----\nSys.which(\"docker\")\n#            docker \n# \"/usr/bin/docker\" \n\n## Install package from sources ----\ninstall.packages(\"jsonlite\", type = \"source\")\n\n\n\n\n\n\n\nUpdate your system regularly\n\n\n\nKeep your Linux packages up-to-date by running:\n## Check for updates ----\nsudo apt update\n\n## Update Linux Apps ----\nsudo apt upgrade"
  },
  {
    "objectID": "chapters/ubuntu.html#configuration",
    "href": "chapters/ubuntu.html#configuration",
    "title": "Ubuntu/Debian",
    "section": "Configuration",
    "text": "Configuration\nYou’ve just installed a working environment for data science w/ , , and .  Now follow instruction to configure your system."
  },
  {
    "objectID": "chapters/rstudio.html",
    "href": "chapters/rstudio.html",
    "title": "RStudio",
    "section": "",
    "text": "This page presents the minimal configuration of RStudio Desktop for a better reproducibility.\nGo to Tools &gt; Global Options &gt; General and:\n\nuncheck Restore .RData into workspace at startup\nselect Never save workspace to .RData on exit\nuncheck Always save history (even when not saving .RData)\n\n\n\n\nFigure 1: Configuration of RStudio IDE\n\n\n\n\n\n\n\n\nTips for better reproducibility\n\n\n\n\nNever save your workspace as .RData: decide what you want to save and use save(), saveRDS(), write.csv(), etc.\nNever save your command history: write your code in  scripts, not in the console\n\n\n\nNow follow instruction to configure git."
  },
  {
    "objectID": "chapters/git.html",
    "href": "chapters/git.html",
    "title": "git",
    "section": "",
    "text": "To use git to version your projects, you need to locally store your credentials (username and email) that will be added to all your commits.\nOpen a terminal (you can use the terminal of RStudio Desktop) and run:\n## Tell git your user name ----\ngit config --global user.name  \"Jane Doe\"\n\n## Tell git your email address ----\ngit config --global user.email \"jane.doe@mail.com\"\nWhen you create a new git project, the default branch will be named master. It’s recommended to replace master by main (for more information read this article).\nOn a terminal, run:\n## Rename default git branch ----\ngit config --global init.defaultBranch main\nFrom now when you will initialize git in a new project, the default branch will be main.\nCheck your git configuration:\n## Print the content of git config file ----\ncat ~/.gitconfig\n# [user]\n#         name  = Jane Doe\n#         email = jane.doe@mail.com\n# [init]\n#         defaultBranch = main\nNow follow instruction to configure GitHub SSH."
  },
  {
    "objectID": "chapters/github-ssh.html",
    "href": "chapters/github-ssh.html",
    "title": "GitHub SSH keys",
    "section": "",
    "text": "…"
  },
  {
    "objectID": "chapters/github-token.html",
    "href": "chapters/github-token.html",
    "title": "GitHub Personal Access Token",
    "section": "",
    "text": "…"
  }
]